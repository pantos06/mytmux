import * as fs from 'fs';
import * as rd from 'readline'

type ProcessFunction = (line: string) => string;
interface IInfo {
    start: string;
    end: string;
};
interface IParameter {
    src: string;
    dest: string;
    process: ProcessFunction;
    info: IInfo;
    append?: boolean;
};

const generateType = (param: IParameter) => {
    var reader = rd.createInterface(fs.createReadStream(param.src))
    var result = param.info.start;
    reader.on("line", (l: string) => {
        result += param.process(l);
    })

    reader.on("close", ()=> {
        result += param.info.end;
        console.log(result);
        if (param.append) {
            fs.appendFileSync(param.dest, result);
        } else {
            fs.writeFileSync(param.dest, result);
        }
    })
};

const processAnnotation=(line: string) => {
    var tokens = line.split(',');
    var id= tokens[0].trim();
    var dicomTagName = tokens[1].trim();
    return `export const ${id}: Annotation = { dicomTagName: '${dicomTagName}' };\n`;
}

var param: IParameter = {
    src: './annotation.csv',
    dest: './generated-annotation.ts',
    process: processAnnotation,
    info: {
        start: "import {Annotation } from './annotation-type'; \n\n",
        end: ''
    }  
};

generateType(param);


const processAnnotationGroup=(line: string) => {

    return `\t[${line}],\n`;
}
param = {
    src: './annotation-group.csv',
    dest: './generated-annotation.ts',
    process: processAnnotationGroup,
    info: {
        start: "\n\nexport const AvailableAnnotations = [\n",
        end: '];'
    },
    append: true
};

generateType(param);
